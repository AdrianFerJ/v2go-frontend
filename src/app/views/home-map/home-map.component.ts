/// <reference types="@types/googlemaps" />
import { Component, ElementRef, NgZone, OnInit, ViewChild } from '@angular/core';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, FormBuilder } from '@angular/forms';
import { SearchStationsService } from '../../shared/services/api.service';
import { ChargingStation } from '../../shared/models/charging-station';
import { ToastrService } from 'ngx-toastr';
import { MapsAPILoader } from '@agm/core';
import { Marker, iconPoi, iconDriver } from './map-utils';

// TODO move this bellow (figure how to address complaint message)
// Observable gets current user geolocation from navigator.
const getCurrentPosition = new Observable<Position>(observer => {
  if ('geolocation' in navigator) {
    navigator.geolocation.getCurrentPosition(
      position => {
        observer.next(position);
      },
      navigatorError => { observer.error(navigatorError); },
      {maximumAge: 600000, timeout: 5000, enableHighAccuracy: true}
    );
  } else {
    observer.error('Geolocation not available');
  }
});

@Component({
  selector: 'app-home-map',
  templateUrl: './home-map.component.html',
  styleUrls: ['./home-map.component.scss']
})
export class HomeMapComponent implements OnInit {

  public loading: boolean;
  public selectedStation: ChargingStation; // for station detail
  public stationsList: ChargingStation[];
  public searchControl: FormControl;

  @ViewChild('search')
  public searchElementRef: ElementRef;

  // Map default values, including lat/lng default value (MTL)
  public driver: Marker;
  public locationChosen = false;
  public poiLat = 45.508048;
  public poiLng = -73.568025;
  public zoom = 13;
  public driverIcon = iconDriver;
  public poiIcon = iconPoi;

  constructor(
    private searchService: SearchStationsService,
    private mapsAPILoader: MapsAPILoader,
    private ngZone: NgZone
    // private toastr: ToastrService
  ) { }

  ngOnInit() {
    // initiate search FormControl
    this.searchControl = new FormControl();

    // Search stations based on my location (browser enabled)
    this.searchStationsNearMe();

    // Load Places Autocomplete
    this.mapsAPILoader.load().then(() => {
      const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, {
        types: ['address'] // limit search to addresses
      });
      autocomplete.addListener('place_changed', () => {
        this.ngZone.run(() => {
          // Get place result
          const place: google.maps.places.PlaceResult = autocomplete.getPlace();

          // Verify result
          if (place.geometry === undefined || place.geometry === null) {
            return;
          }

          // set latitude, longitude and zoom
          // this.latitude = place.geometry.location.lat();
          // this.longitude = place.geometry.location.lng();
          // this.zoom = 12;
        });
      });
    });
  }

  onSubmit() {
    this.loading = true;
    setTimeout(() => {
      this.loading = false;
      this.findStations(this.poiLat, this.poiLng);
      // this.toastr.success('Profile updated.', 'Success!', {progressBar: true});
    }, 100);
  }

  /**
   * Method uses searchService (observer) to call api/find-station.
   * Returns an array of CSs
   *
   * @param lat, lng
   */
  findStations(lat: number, lng: number): void {
    this.searchService.findStations(lat, lng)
      .subscribe(stationsList => {
        this.stationsList = stationsList;
      });
  }
  /**
   * Event handler displays a marker on the map where click-ed
   *
   * @param event generated by a click-on-the-map
   */
  onChoseLocation(event) {
    this.poiLat = event.coords.lat;
    this.poiLng = event.coords.lng;
    this.locationChosen = true;
  }
  /**
   * Search stations near User's location (from navigator, if not available
   * use MTL coords) then, displays driver and CSs on map.
   */
  searchStationsNearMe(): void {
    getCurrentPosition.subscribe( position => {
        this.poiLat = position.coords.latitude;
        this.poiLng = position.coords.longitude;

        // Get stations near User's location
        this.findStations(this.poiLat, this.poiLng);
        this.displayUser(this.poiLat, this.poiLng);
      }, error => {
        // TODO add toaster warning (GPS signal not found)
        console.log('# ERROR at searchStationsNearMe(). Message: ', error);

        // Get stations near default MTL coords
        this.findStations(this.poiLat, this.poiLng);
    });
  }
  // Create a marker and display user locaiton on map
  displayUser(lat, lng) {
    this.driver = new Marker(lat, lng, 'Driver', this.driverIcon);
  }
}

// /**
//  * Observable streams user geolocation from navigator.
//  * Check: https://angular.io/guide/observables#basic-usage-and-terms
//  */
// const streamUserPosition = new Observable((observer) => {
//   // Get the next and error callbacks when the consumer subscribes.
//   const {next, error} = observer;
//   let watchId;
//   // Simple geolocation API check provides values to publish
//   if ('geolocation' in navigator) {
//     watchId = navigator.geolocation.watchPosition(next, error);
//   } else {
//     error('Geolocation not available');
//   }
//   // When the consumer unsubscribes, clean up data ready for next subscription.
//   return {unsubscribe() { navigator.geolocation.clearWatch(watchId); }};
// });

